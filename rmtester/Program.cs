using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using RMDatabase;
using RMDatabase.Models;
using rmSharp;
using System.Diagnostics;
using System.Net;
using System.Security.AccessControl;
using System.Text.RegularExpressions;
using static System.Diagnostics.Trace;

using Task = RMDatabase.Models.Task;
//using static System.Console;

namespace rmtester
{
    internal static class Helpers
    {
        public static Person MakePerson(this DbSet<Person> persons, string surname, string given, Sex sex, DateTime birthday, Place place)
        {            
            var person = new Person();
            person.Sex = sex;
            person.Names.Add(new Name { Surname = surname, Given = given, IsPrimary = true });
            person.Events.Add(new PersonEvent { EventType = 1, Date = new RMDate(birthday), Place = place });
            persons.Add(person);

            return person;
        }
    }


    internal class Program
    {
        static PersonEvent makeEvent(long eventType, DateTime date, Place? place = null)
        {
            return new PersonEvent
            {
                EventType = eventType,
                Date = new RMDate(date),
                Place = place
            };
        }


        //static Person MakePerson(string surname, string given, Sex sex, DateTime birthday, Place place)
        //{
        //    var person = new Person();
        //    person.Sex = sex;
        //    person.Names.Add(new Name { Surname = surname, Given = given, IsPrimary = true });
        //    person.Events.Add(new PersonEvent { EventType = 1, Date = new RMDate(birthday), Place = place });

        //    return person;
        //}


        static void Main(string[] args)
        {
            DB.sqLiteFile = "empty2.rmtree";




            using (var db = new DB())
            {
                var evd = db.FactTypeTables.ToDictionary(k => k.Name, k => k.FactTypeId);

                Place Waging = db.Places.GetOrMake("Waging", "Waging,Bayern,Deutschland");
                Place Traunstein = db.Places.GetOrMake("Traustein", "Traunstein, Bayern,Deutschland");

                var lutz = db.Persons.MakePerson("Niggl", "Lutz", Sex.Male, birthday: new DateTime(1964, 11, 24), Waging);
                var petra = db.Persons.MakePerson("Schlagbauer", "Petra", Sex.Female, birthday: DateTime.Parse("21.6.67"), Waging);
                var paula = db.Persons.MakePerson("Schlagbauer", "Paula", Sex.Female, birthday: DateTime.Parse("22.10.1999"), Waging);
                var peter = db.Persons.MakePerson("Schlabauer", "Peter", Sex.Male, DateTime.Parse("1.1.95"), Traunstein);
                var lotte = db.Persons.MakePerson("Test", "Lotte", Sex.Female, DateTime.Parse("2.3.71"), Traunstein);

                var task = new Task()
                {
                    Name = "Check autogenerated person",
                    Details = "Created by rmSharp",
                };

                petra.Events.Add(new PersonEvent { EventType = 2, Date = new RMDate(DateTime.Parse("1999,12,1")), Place = Traunstein });

                lutz.Tasks.Add(task);
                petra.Tasks.Add(task);
                paula.Tasks.Add(task);
                peter.Tasks.Add(task);



                var fam = new Family()
                {
                    Husband = lutz,
                    Wife = petra,
                };
                fam.AddChild(paula);

                var fam2 = new Family()
                {
                    Husband = lutz,
                    Wife = lotte,
                };
                fam2.AddChild(peter, relFather: RelationShip.Step, relMother: RelationShip.Birth);

                fam.Events.Add(new FamilyEvent
                {
                    EventType = 300,
                    Date = new RMDate(DateTime.Parse("23.4.1992")),
                    Details = "Ingolstadt, Piuskirche"
                });


                db.Families.AddRange([fam, fam2]);






                var x = db.SaveChanges();
            }




            using (var db = new DB())
            {
                //new Example.MaleAncestrors().Execute(Surname: "Schlagbauer", Given: "Paula Franziska Christiana");
                //new Example.DecendantTree().Execute("Oberhauser", "Johann");
                //new Example.AddPerson().Execute();
                //new Example.Pedigree().Execute(Surname: "Niggl", Given: "Lutz Günther");
                //new Example.MultiplePrimaryNames().Execute();
                //new Example.MultipleParents().Execute();
            }
        }
    }
}








