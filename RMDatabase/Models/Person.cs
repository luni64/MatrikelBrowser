// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using Castle.Core.Resource;
using DelegateDecompiler;
using System;
using System.Collections.Generic;
using System.Linq;

namespace RMDatabase.Models;

public enum Gender { male = 0, female = 1, unknown = 2 };


public partial class Person
{
    public long PersonId { get; set; }

    public string UniqueId { get; set; } = Guid.NewGuid().toGedUid();

    public Gender Sex { get; set; } = Gender.unknown;

    public long ParentId { get; set; }

    public long SpouseId { get; set; }

    public long Color { get; set; }

    public long Color1 { get; set; }

    public long Color2 { get; set; }

    public long Color3 { get; set; }

    public long Color4 { get; set; }

    public long Color5 { get; set; }

    public long Color6 { get; set; }

    public long Color7 { get; set; }

    public long Color8 { get; set; }

    public long Color9 { get; set; }

    public long Relate1 { get; set; }

    public long Relate2 { get; set; }

    public long Flags { get; set; }

    public bool Living { get; set; }

    public bool IsPrivate { get; set; } = false;

    public long Proof { get; set; }

    public long Bookmark { get; set; }

    public string Note { get; set; } = string.Empty;

    public DateTime ChangeDate { get; set; } = DateTime.Now;

    [Decompile]
    public Name PrimaryName => Names.First(n => n.NameType == NameTypes.Primary);//?? new Name {Surname= "no primary name" };


    public virtual ICollection<Family> Families { get; set; } = [];
    public virtual ICollection<Name> Names { get; set; } = [];
    public virtual ICollection<Address> Addresses { get; set; } = [];

    public IQueryable<Person> getChildren(rmContext db)
    {
        var families = db.ChildTable
            .Where(c => (c.Family.FatherId == PersonId && c.RelFather == RelationShip.Birth) || (c.Family.MotherId == PersonId && c.RelMother == RelationShip.Birth))
            .Select(c => c.FamilyId)
            .Distinct();


        return db.FamilyTable.Where(f=> families.Contains(f.FamilyId)).SelectMany(f => f.Children);
    }

    public IQueryable<Family> getFamilies(rmContext db)
    {
        return db.ChildTable
            .Where(c => (c.Family.FatherId == PersonId && c.RelFather == RelationShip.Birth) || (c.Family.MotherId == PersonId && c.RelMother == RelationShip.Birth))
            .Select(c => c.Family)
            .Distinct();       
    }

    public override string ToString() => $"{PrimaryName.Surname} {PrimaryName.Given}";
}

//public static class ext
//{
//    public static IQueryable<Person> Childrenn(this IQueryable<Family> family)
//    {
//        return family.Select(f => f.
//        {
//            FullName = c.FirstName + " " + c.LastName,
//            AccountValue = c.Holdings.Sum(h => h.Quantity * h.Stock.Price)
//        });
//    }

//    public static IQueryable<CustomerData> SelectCustomerData(this IQueryable<Customer> customers)
//    {
//        return customers.Select(c => new CustomerData
//        {
//            FullName = c.FirstName + " " + c.LastName,
//            AccountValue = c.Holdings.Sum(h => h.Quantity * h.Stock.Price)
//        });
//    }
//}