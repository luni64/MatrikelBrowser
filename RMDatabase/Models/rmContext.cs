// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RMDatabase.Models;

public partial class rmContext : DbContext
{
    public rmContext(DbContextOptions<rmContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AddressLinkTable> AddressLinkTables { get; set; }

    public virtual DbSet<AddressTable> AddressTables { get; set; }

    public virtual DbSet<AncestryTable> AncestryTables { get; set; }

    public virtual DbSet<ChildTable> ChildTables { get; set; }

    public virtual DbSet<CitationLinkTable> CitationLinkTables { get; set; }

    public virtual DbSet<CitationTable> CitationTables { get; set; }

    public virtual DbSet<ConfigTable> ConfigTables { get; set; }

    public virtual DbSet<EventTable> EventTables { get; set; }

    public virtual DbSet<ExclusionTable> ExclusionTables { get; set; }

    public virtual DbSet<FactTypeTable> FactTypeTables { get; set; }

    public virtual DbSet<FamilySearchTable> FamilySearchTables { get; set; }

    public virtual DbSet<FamilyTable> FamilyTables { get; set; }

    public virtual DbSet<Fantable> Fantables { get; set; }

    public virtual DbSet<FantypeTable> FantypeTables { get; set; }

    public virtual DbSet<GroupTable> GroupTables { get; set; }

    public virtual DbSet<MediaLinkTable> MediaLinkTables { get; set; }

    public virtual DbSet<MultimediaTable> MultimediaTables { get; set; }

    public virtual DbSet<NameTable> NameTables { get; set; }

    public virtual DbSet<PayloadTable> PayloadTables { get; set; }

    public virtual DbSet<PersonTable> PersonTables { get; set; }

    public virtual DbSet<PlaceTable> PlaceTables { get; set; }

    public virtual DbSet<RoleTable> RoleTables { get; set; }

    public virtual DbSet<SourceTable> SourceTables { get; set; }

    public virtual DbSet<SourceTemplateTable> SourceTemplateTables { get; set; }

    public virtual DbSet<TagTable> TagTables { get; set; }

    public virtual DbSet<TaskLinkTable> TaskLinkTables { get; set; }

    public virtual DbSet<TaskTable> TaskTables { get; set; }

    public virtual DbSet<Urltable> Urltables { get; set; }

    public virtual DbSet<WitnessTable> WitnessTables { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AddressLinkTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("AddressLinkTable");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.AddressId).HasColumnName("AddressID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<AddressTable>(entity =>
        {
            entity.HasKey(e => e.AddressId);

            entity.ToTable("AddressTable");

            entity.HasIndex(e => e.Name, "idxAddressName");

            entity.Property(e => e.AddressId)
                .ValueGeneratedNever()
                .HasColumnName("AddressID");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<AncestryTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("AncestryTable");

            entity.HasIndex(e => e.RmId, "idxLinkAncestryRmId");

            entity.HasIndex(e => e.AnId, "idxLinkAncestryanID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.AnDate)
                .HasColumnType("FLOAT")
                .HasColumnName("anDate");
            entity.Property(e => e.AnId).HasColumnName("anID");
            entity.Property(e => e.AnVersion).HasColumnName("anVersion");
            entity.Property(e => e.RmId).HasColumnName("rmID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<ChildTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("ChildTable");

            entity.HasIndex(e => e.FamilyId, "idxChildFamilyID");

            entity.HasIndex(e => e.ChildId, "idxChildID");

            entity.HasIndex(e => e.ChildOrder, "idxChildOrder");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.ChildId).HasColumnName("ChildID");
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<CitationLinkTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("CitationLinkTable");

            entity.HasIndex(e => e.OwnerId, "idxCitationLinkOwnerID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.CitationId).HasColumnName("CitationID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<CitationTable>(entity =>
        {
            entity.HasKey(e => e.CitationId);

            entity.ToTable("CitationTable");

            entity.HasIndex(e => e.CitationName, "idxCitationName");

            entity.HasIndex(e => e.SourceId, "idxCitationSourceID");

            entity.Property(e => e.CitationId)
                .ValueGeneratedNever()
                .HasColumnName("CitationID");
            entity.Property(e => e.SourceId).HasColumnName("SourceID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<ConfigTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("ConfigTable");

            entity.HasIndex(e => e.RecType, "idxRecType");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<EventTable>(entity =>
        {
            entity.HasKey(e => e.EventId);

            entity.ToTable("EventTable");

            entity.HasIndex(e => new { e.OwnerId, e.SortDate }, "idxOwnerDate");

            entity.HasIndex(e => new { e.OwnerId, e.EventType }, "idxOwnerEvent");

            entity.Property(e => e.EventId)
                .ValueGeneratedNever()
                .HasColumnName("EventID");
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.PlaceId).HasColumnName("PlaceID");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<ExclusionTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("ExclusionTable");

            entity.HasIndex(e => new { e.ExclusionType, e.Id1, e.Id2 }, "idxExclusionIndex").IsUnique();

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.Id1).HasColumnName("ID1");
            entity.Property(e => e.Id2).HasColumnName("ID2");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<FactTypeTable>(entity =>
        {
            entity.HasKey(e => e.FactTypeId);

            entity.ToTable("FactTypeTable");

            entity.HasIndex(e => e.Abbrev, "idxFactTypeAbbrev");

            entity.HasIndex(e => e.GedcomTag, "idxFactTypeGedcomTag");

            entity.HasIndex(e => e.Name, "idxFactTypeName");

            entity.Property(e => e.FactTypeId)
                .ValueGeneratedNever()
                .HasColumnName("FactTypeID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<FamilySearchTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("FamilySearchTable");

            entity.HasIndex(e => e.RmId, "idxLinkRmId");

            entity.HasIndex(e => e.FsId, "idxLinkfsID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.FsDate)
                .HasColumnType("FLOAT")
                .HasColumnName("fsDate");
            entity.Property(e => e.FsId).HasColumnName("fsID");
            entity.Property(e => e.FsVersion).HasColumnName("fsVersion");
            entity.Property(e => e.RmId).HasColumnName("rmID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<FamilyTable>(entity =>
        {
            entity.HasKey(e => e.FamilyId);

            entity.ToTable("FamilyTable");

            entity.HasIndex(e => e.FatherId, "idxFamilyFatherID");

            entity.HasIndex(e => e.MotherId, "idxFamilyMotherID");

            entity.Property(e => e.FamilyId)
                .ValueGeneratedNever()
                .HasColumnName("FamilyID");
            entity.Property(e => e.ChildId).HasColumnName("ChildID");
            entity.Property(e => e.FatherId).HasColumnName("FatherID");
            entity.Property(e => e.MotherId).HasColumnName("MotherID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<Fantable>(entity =>
        {
            entity.HasKey(e => e.FanId);

            entity.ToTable("FANTable");

            entity.HasIndex(e => e.Id1, "idxFanId1");

            entity.HasIndex(e => e.Id2, "idxFanId2");

            entity.Property(e => e.FanId)
                .ValueGeneratedNever()
                .HasColumnName("FanID");
            entity.Property(e => e.FanTypeId).HasColumnName("FanTypeID");
            entity.Property(e => e.Id1).HasColumnName("ID1");
            entity.Property(e => e.Id2).HasColumnName("ID2");
            entity.Property(e => e.PlaceId).HasColumnName("PlaceID");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<FantypeTable>(entity =>
        {
            entity.HasKey(e => e.FantypeId);

            entity.ToTable("FANTypeTable");

            entity.HasIndex(e => e.Name, "idxFANTypeName");

            entity.Property(e => e.FantypeId)
                .ValueGeneratedNever()
                .HasColumnName("FANTypeID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<GroupTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("GroupTable");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.EndId).HasColumnName("EndID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.StartId).HasColumnName("StartID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<MediaLinkTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("MediaLinkTable");

            entity.HasIndex(e => e.OwnerId, "idxMediaOwnerID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.MediaId).HasColumnName("MediaID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<MultimediaTable>(entity =>
        {
            entity.HasKey(e => e.MediaId);

            entity.ToTable("MultimediaTable");

            entity.HasIndex(e => e.MediaFile, "idxMediaFile");

            entity.HasIndex(e => e.Url, "idxMediaURL");

            entity.Property(e => e.MediaId)
                .ValueGeneratedNever()
                .HasColumnName("MediaID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<NameTable>(entity =>
        {
            entity.HasKey(e => e.NameId);

            entity.ToTable("NameTable");

            entity.HasIndex(e => e.Given, "idxGiven");

            entity.HasIndex(e => e.GivenMp, "idxGivenMP");

            entity.HasIndex(e => e.OwnerId, "idxNameOwnerID");

            entity.HasIndex(e => e.IsPrimary, "idxNamePrimary");

            entity.HasIndex(e => e.Surname, "idxSurname");

            entity.HasIndex(e => new { e.Surname, e.Given, e.BirthYear, e.DeathYear }, "idxSurnameGiven");

            entity.HasIndex(e => new { e.SurnameMp, e.GivenMp, e.BirthYear, e.DeathYear }, "idxSurnameGivenMP");

            entity.HasIndex(e => e.SurnameMp, "idxSurnameMP");

            entity.Property(e => e.NameId)
                .ValueGeneratedNever()
                .HasColumnName("NameID");
            entity.Property(e => e.GivenMp).HasColumnName("GivenMP");
            entity.Property(e => e.NicknameMp).HasColumnName("NicknameMP");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.SurnameMp).HasColumnName("SurnameMP");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<PayloadTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("PayloadTable");

            entity.HasIndex(e => e.RecType, "idxPayloadType");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<PersonTable>(entity =>
        {
            entity.HasKey(e => e.PersonId);

            entity.ToTable("PersonTable");

            entity.Property(e => e.PersonId)
                .ValueGeneratedNever()
                .HasColumnName("PersonID");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.SpouseId).HasColumnName("SpouseID");
            entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<PlaceTable>(entity =>
        {
            entity.HasKey(e => e.PlaceId);

            entity.ToTable("PlaceTable");

            entity.HasIndex(e => e.Abbrev, "idxPlaceAbbrev");

            entity.HasIndex(e => e.Name, "idxPlaceName");

            entity.HasIndex(e => e.Reverse, "idxReversePlaceName");

            entity.Property(e => e.PlaceId)
                .ValueGeneratedNever()
                .HasColumnName("PlaceID");
            entity.Property(e => e.AnId).HasColumnName("anID");
            entity.Property(e => e.FsId).HasColumnName("fsID");
            entity.Property(e => e.MasterId).HasColumnName("MasterID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<RoleTable>(entity =>
        {
            entity.HasKey(e => e.RoleId);

            entity.ToTable("RoleTable");

            entity.HasIndex(e => e.EventType, "idxRoleEventType");

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("RoleID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<SourceTable>(entity =>
        {
            entity.HasKey(e => e.SourceId);

            entity.ToTable("SourceTable");

            entity.HasIndex(e => e.Name, "idxSourceName");

            entity.Property(e => e.SourceId)
                .ValueGeneratedNever()
                .HasColumnName("SourceID");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<SourceTemplateTable>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("SourceTemplateTable");

            entity.HasIndex(e => e.Name, "idxSourceTemplateName");

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<TagTable>(entity =>
        {
            entity.HasKey(e => e.TagId);

            entity.ToTable("TagTable");

            entity.HasIndex(e => e.TagType, "idxTagType");

            entity.Property(e => e.TagId)
                .ValueGeneratedNever()
                .HasColumnName("TagID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<TaskLinkTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("TaskLinkTable");

            entity.HasIndex(e => e.OwnerId, "idxTaskOwnerID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.TaskId).HasColumnName("TaskID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<TaskTable>(entity =>
        {
            entity.HasKey(e => e.TaskId);

            entity.ToTable("TaskTable");

            entity.HasIndex(e => e.Name, "idxTaskName");

            entity.Property(e => e.TaskId)
                .ValueGeneratedNever()
                .HasColumnName("TaskID");
            entity.Property(e => e.SortDate1).HasColumnType("BIGINT");
            entity.Property(e => e.SortDate2).HasColumnType("BIGINT");
            entity.Property(e => e.SortDate3).HasColumnType("BIGINT");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<Urltable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("URLTable");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<WitnessTable>(entity =>
        {
            entity.HasKey(e => e.WitnessId);

            entity.ToTable("WitnessTable");

            entity.HasIndex(e => e.EventId, "idxWitnessEventID");

            entity.HasIndex(e => e.PersonId, "idxWitnessPersonID");

            entity.Property(e => e.WitnessId)
                .ValueGeneratedNever()
                .HasColumnName("WitnessID");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}