// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using Microsoft.EntityFrameworkCore;


namespace RMDatabase.Models;

public partial class rmContext : DbContext
{
    public rmContext(DbContextOptions<rmContext> options)
        : base(options)
    {
    }

    #region Models

    public virtual DbSet<AddressLinkTable> AddressLinkTables { get; set; }
    public virtual DbSet<Address> AddressTable { get; set; }
    public virtual DbSet<AncestryTable> AncestryTables { get; set; }
    public virtual DbSet<ChildTable> ChildTable { get; set; }
    public virtual DbSet<CitationLinkTable> CitationLinkTables { get; set; }
    public virtual DbSet<Citation> Citations { get; set; }
    public virtual DbSet<ConfigTable> ConfigTables { get; set; }
    public virtual DbSet<Event> Events { get; set; }
    public virtual DbSet<ExclusionTable> ExclusionTables { get; set; }
    public virtual DbSet<FactType> FactTypeTables { get; set; }
    public virtual DbSet<FamilySearchTable> FamilySearchTables { get; set; }
    public virtual DbSet<Family> FamilyTable { get; set; }
    public virtual DbSet<Fantable> Fantables { get; set; }
    public virtual DbSet<FantypeTable> FantypeTables { get; set; }
    public virtual DbSet<GroupEntry> GroupEntries { get; set; }
    public virtual DbSet<MediaLinkTable> MediaLinkTables { get; set; }
    public virtual DbSet<Medium> MultimediaTables { get; set; }
    public virtual DbSet<Name> NameTable { get; set; }
    public virtual DbSet<Payload> PayloadTables { get; set; }
    public virtual DbSet<Person> Persons { get; set; }
    public virtual DbSet<Place> Places { get; set; }
    public virtual DbSet<RoleTable> RoleTables { get; set; }
    public virtual DbSet<Source> Sources { get; set; }
    public virtual DbSet<SourceTemplateTable> SourceTemplateTables { get; set; }
    public virtual DbSet<TagTable> TagTables { get; set; }
    public virtual DbSet<TaskLinkTable> TaskLinkTables { get; set; }
    public virtual DbSet<TaskTable> TaskTables { get; set; }
    public virtual DbSet<WebTag> WebTags { get; set; }
    public virtual DbSet<WitnessTable> WitnessTables { get; set; }

    #endregion

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AddressLinkTable>(entity =>
        {
            entity.ToTable("AddressLinkTable");
            entity.HasKey(e => e.LinkId);
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(-1);  // dummy value, won't compile without value

            entity.Property(e => e.LinkId).HasColumnName("LinkID").ValueGeneratedNever();
            entity.Property(e => e.AddressId).HasColumnName("AddressID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate).HasColumnName("UTCModDate").HasColumnType("FLOAT");
        }); // dicriminator based M:N relationship  https://stackoverflow.com/a/77587113/3866165

        modelBuilder.Entity<AddressPerson>(entity =>
        {
            entity.ToTable("AddressLinkTable").HasDiscriminator<long>(e => e.OwnerType).HasValue(0);
        });

        modelBuilder.Entity<AddressFamily>(entity =>
        {
            entity.ToTable("AddressLinkTable")
            .HasDiscriminator<long>(e => e.OwnerType).HasValue(1);
        });

        modelBuilder.Entity<RepositorySource>(entity =>
        {
            entity.ToTable("AddressLinkTable").HasDiscriminator<long>(e => e.OwnerType).HasValue(3);


        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.ToTable("AddressTable");
            entity.HasKey(e => e.AddressId);
            //entity.HasDiscriminator().HasValue(0);

            entity.HasIndex(e => e.Name, "idxAddressName");
            entity.Property(e => e.AddressId).ValueGeneratedNever().HasColumnName("AddressID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");
            entity.Property(e => e.Url).HasColumnName("URL");
        });

        modelBuilder.Entity<AncestryTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("AncestryTable");

            entity.HasIndex(e => e.RmId, "idxLinkAncestryRmId");

            entity.HasIndex(e => e.AnId, "idxLinkAncestryanID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.AnDate)
                .HasColumnType("FLOAT")
                .HasColumnName("anDate");
            entity.Property(e => e.AnId).HasColumnName("anID");
            entity.Property(e => e.AnVersion).HasColumnName("anVersion");
            entity.Property(e => e.RmId).HasColumnName("rmID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<ChildTable>(entity =>
        {
            entity.ToTable("ChildTable");
            entity.HasKey(e => e.RecId);

            entity.Property(e => e.RecId).ValueGeneratedNever().HasColumnName("RecID");
            entity.Property(e => e.ChildId).HasColumnName("ChildID");
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");
            entity.Property(e => e.RelFather).HasConversion<long>();
            entity.Property(e => e.RelMother).HasConversion<long>();
            entity.Property(e => e.IsPrivate).HasConversion<long>();

            entity.HasOne(ct => ct.family).WithMany(ct => ct.ChildInfos).HasForeignKey(ct => ct.FamilyId);
            entity.HasOne(ct => ct.person).WithMany(p => p.ParentRelations).HasForeignKey(ct => ct.ChildId);

            entity.HasIndex(e => e.FamilyId, "idxChildFamilyID");
            entity.HasIndex(e => e.ChildId, "idxChildID");
            entity.HasIndex(e => e.ChildOrder, "idxChildOrder");

        });

        modelBuilder.Entity<CitationLinkTable>(entity =>
        {
            entity.ToTable("CitationLinkTable");
            entity.HasKey(e => e.LinkId);
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(-1);

            entity.Property(e => e.LinkId).HasColumnName("LinkID").ValueGeneratedNever();
            entity.Property(e => e.CitationId).HasColumnName("CitationID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

            entity.HasIndex(e => e.OwnerId, "idxCitationLinkOwnerID");
        });
        modelBuilder.Entity<PersonCitationLink>(entity =>
        {
            entity.ToTable("CitationLinkTable").HasDiscriminator<long>(e => e.OwnerType).HasValue(0);
        });
        modelBuilder.Entity<FamilyCitationLink>(entity =>
        {
            entity.ToTable("CitationLinkTable").HasDiscriminator<long>(e => e.OwnerType).HasValue(1);
        });
        modelBuilder.Entity<EventCitationLink>(entity =>
        {
            entity.ToTable("CitationLinkTable").HasDiscriminator<long>(e => e.OwnerType).HasValue(2);
        });
        modelBuilder.Entity<NameCitationLink>(entity =>
        {
            entity.ToTable("CitationLinkTable").HasDiscriminator<long>(e => e.OwnerType).HasValue(7);
        });

        modelBuilder.Entity<Citation>(entity =>
        {
            entity.ToTable("CitationTable");
            entity.HasKey(e => e.CitationId);

            entity.Property(e => e.CitationId).HasColumnName("CitationID").ValueGeneratedNever();
            entity.Property(e => e.SourceId).HasColumnName("SourceID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

            entity.HasOne(ct => ct.Source).WithMany(s => s.Citations).HasForeignKey(ct => ct.SourceId);
            entity.HasOne(c => c.CitationDetails).WithMany().HasForeignKey(e => e.CitationId);
            entity.HasMany(e => e.WebTags).WithOne().HasForeignKey(e => e.OwnerId);

            entity.HasMany(p => p.Media).WithMany().UsingEntity<MediaCitationLink>(
                l => l.HasOne<Medium>().WithMany().HasForeignKey(e => e.MediaId),
                r => r.HasOne<Citation>().WithMany().HasForeignKey(e => e.OwnerId));

            entity.HasIndex(e => e.CitationName, "idxCitationName");
            entity.HasIndex(e => e.SourceId, "idxCitationSourceID");
        });

        modelBuilder.Entity<ConfigTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("ConfigTable");

            entity.HasIndex(e => e.RecType, "idxRecType");

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.ToTable("EventTable");
            entity.HasKey(e => e.EventId);
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(-1);

            entity.Property(e => e.EventId).HasColumnName("EventID").ValueGeneratedNever();
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.PlaceId).HasColumnName("PlaceID");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");
            entity.Property(e => e.Date).HasConversion(rmd => rmd.toRmDatestring(), ds => new rmSharp.RMDate(ds));


            entity.HasOne(e => e.FactType).WithMany().HasForeignKey(f => f.EventType);


            entity.HasMany(p => p.Citations).WithMany().UsingEntity<EventCitationLink>(
               l => l.HasOne<Citation>().WithMany().HasForeignKey(e => e.CitationId),
               r => r.HasOne<Event>().WithMany().HasForeignKey(e => e.OwnerId));

            entity.HasMany(p => p.Media).WithMany().UsingEntity<MediaPersonLink>(
              l => l.HasOne<Medium>().WithMany().HasForeignKey(e => e.MediaId),
              r => r.HasOne<Event>().WithMany().HasForeignKey(e => e.OwnerId));

            entity.HasIndex(e => new { e.OwnerId, e.SortDate }, "idxOwnerDate");
            entity.HasIndex(e => new { e.OwnerId, e.EventType }, "idxOwnerEvent");
        });

        modelBuilder.Entity<PersonEvent>(entity =>
        {
            entity.ToTable("EventTable");
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(0);
            //entity.HasMany(p => p.Persons).WithMany(x => x.Events);
        });

        modelBuilder.Entity<FamilyEvent>(entity =>
        {
            entity.ToTable("EventTable");
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(1);
        });

        modelBuilder.Entity<ExclusionTable>(entity =>
        {
            entity.HasKey(e => e.RecId);

            entity.ToTable("ExclusionTable");

            entity.HasIndex(e => new { e.ExclusionType, e.Id1, e.Id2 }, "idxExclusionIndex").IsUnique();

            entity.Property(e => e.RecId)
                .ValueGeneratedNever()
                .HasColumnName("RecID");
            entity.Property(e => e.Id1).HasColumnName("ID1");
            entity.Property(e => e.Id2).HasColumnName("ID2");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<FactType>(entity =>
        {
            entity.HasKey(e => e.FactTypeId);

            entity.ToTable("FactTypeTable");

            entity.HasIndex(e => e.Abbrev, "idxFactTypeAbbrev");

            entity.HasIndex(e => e.GedcomTag, "idxFactTypeGedcomTag");

            entity.HasIndex(e => e.Name, "idxFactTypeName");

            entity.Property(e => e.FactTypeId)
                .ValueGeneratedNever()
                .HasColumnName("FactTypeID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");


            entity.HasMany(f => f.Events).WithOne(x => x.FactType).HasForeignKey(f => f.EventType);
        });

        modelBuilder.Entity<FamilySearchTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("FamilySearchTable");

            entity.HasIndex(e => e.RmId, "idxLinkRmId");

            entity.HasIndex(e => e.FsId, "idxLinkfsID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.FsDate)
                .HasColumnType("FLOAT")
                .HasColumnName("fsDate");
            entity.Property(e => e.FsId).HasColumnName("fsID");
            entity.Property(e => e.FsVersion).HasColumnName("fsVersion");
            entity.Property(e => e.RmId).HasColumnName("rmID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<Family>(entity =>
        {
            entity.ToTable("FamilyTable");
            entity.HasKey(e => e.FamilyId);

            entity.Property(e => e.FamilyId).HasColumnName("FamilyID").ValueGeneratedOnAdd();
            entity.Property(e => e.ChildId).HasColumnName("ChildID");
            entity.Property(e => e.HusbandId).HasColumnName("FatherID");
            entity.Property(e => e.WifeId).HasColumnName("MotherID");
            entity.Property(e => e.IsPrivate).HasConversion<long>();
            entity.Property(e => e.ChangeDate).HasColumnName("UTCModDate").HasColumnType("FLOAT").HasConversion(v => v.toUTCModDate(), v => v.toDateTime());

            entity.HasOne(f => f.Wife).WithOne().HasForeignKey<Family>(p => p.WifeId);
            entity.HasOne(f => f.Husband).WithOne().HasForeignKey<Family>(p => p.HusbandId);

            entity.HasOne(f => f.Husband).WithMany("_familiesM").HasForeignKey(f => f.HusbandId);
            entity.HasOne(f => f.Wife).WithMany("_familiesF").HasForeignKey(f => f.WifeId);

            entity.HasMany(f => f.Events).WithOne().HasForeignKey(e => e.OwnerId);

            entity.HasMany(p => p.Citations).WithMany().UsingEntity<FamilyCitationLink>(
             l => l.HasOne<Citation>().WithMany().HasForeignKey(e => e.CitationId),
             r => r.HasOne<Family>().WithMany().HasForeignKey(e => e.OwnerId));

            //entity.HasMany(e => e.Children).WithMany().UsingEntity<ChildTable>(
            //    r => r.HasOne<Person>().WithMany().HasForeignKey(e => e.ChildId),
            //    l => l.HasOne<Family>().WithMany().HasForeignKey(e => e.FamilyId));

            entity.HasIndex(e => e.HusbandId, "idxFamilyFatherID");
            entity.HasIndex(e => e.WifeId, "idxFamilyMotherID");

        });

        modelBuilder.Entity<Fantable>(entity =>
        {
            entity.HasKey(e => e.FanId);

            entity.ToTable("FANTable");

            entity.HasIndex(e => e.Id1, "idxFanId1");

            entity.HasIndex(e => e.Id2, "idxFanId2");

            entity.Property(e => e.FanId).ValueGeneratedNever().HasColumnName("FanID");
            entity.Property(e => e.FanTypeId).HasColumnName("FanTypeID");
            entity.Property(e => e.Id1).HasColumnName("ID1");
            entity.Property(e => e.Id2).HasColumnName("ID2");
            entity.Property(e => e.PlaceId).HasColumnName("PlaceID");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");


        });

        modelBuilder.Entity<FantypeTable>(entity =>
        {
            entity.HasKey(e => e.FantypeId);

            entity.ToTable("FANTypeTable");

            entity.HasIndex(e => e.Name, "idxFANTypeName");

            entity.Property(e => e.FantypeId)
                .ValueGeneratedNever()
                .HasColumnName("FANTypeID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        //modelBuilder.Entity<Group>(entity =>
        //{
        //   // entity.HasNoKey();


        //   // entity.HasMany(e => e.Entries).WithOne().HasForeignKey(e => e.GroupId);

        //});

        modelBuilder.Entity<GroupEntry>(entity =>
        {
            entity.ToTable("GroupTable");
            entity.HasKey(e => e.RecId);

            entity.Property(e => e.RecId).ValueGeneratedNever().HasColumnName("RecID");
            entity.Property(e => e.EndId).HasColumnName("EndID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.StartId).HasColumnName("StartID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

        });

        modelBuilder.Entity<MediaLinkTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);
            entity.ToTable("MediaLinkTable");

            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(-1);

            entity.Property(e => e.LinkId).ValueGeneratedNever().HasColumnName("LinkID");
            entity.Property(e => e.MediaId).HasColumnName("MediaID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");
            entity.HasIndex(e => e.OwnerId, "idxMediaOwnerID");
        });
        modelBuilder.Entity<MediaPersonLink>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(0));
        modelBuilder.Entity<MediaEventLink>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(2));
        modelBuilder.Entity<MediaSourceLink>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(3));
        modelBuilder.Entity<MediaCitationLink>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(4));

        modelBuilder.Entity<Medium>(entity =>
        {
            entity.HasKey(e => e.MediaId);

            entity.ToTable("MultimediaTable");

            entity.HasIndex(e => e.MediaFile, "idxMediaFile");

            entity.HasIndex(e => e.Url, "idxMediaURL");

            entity.Property(e => e.MediaId)
                .ValueGeneratedNever()
                .HasColumnName("MediaID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<Name>(entity =>
        {
            entity.ToTable("NameTable");
            entity.HasKey(e => e.NameId);

            entity.Property(e => e.NameId).HasColumnName("NameID").ValueGeneratedOnAdd();
            entity.Property(e => e.GivenMp).HasColumnName("GivenMP");
            entity.Property(e => e.NicknameMp).HasColumnName("NicknameMP");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.SortDate).HasColumnType("BIGINT");
            entity.Property(e => e.SurnameMp).HasColumnName("SurnameMP");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

            entity.Property(e => e.NameType).HasConversion<long>();
            entity.Property(e => e.IsPrimary).HasConversion<long>();
            entity.Property(e => e.IsPrivate).HasConversion<long>();

            entity.HasMany(p => p.Citations).WithMany().UsingEntity<PersonCitationLink>(
                l => l.HasOne<Citation>().WithMany().HasForeignKey(e => e.CitationId),
                r => r.HasOne<Name>().WithMany().HasForeignKey(e => e.OwnerId));

            entity.HasIndex(e => e.Given, "idxGiven");
            entity.HasIndex(e => e.GivenMp, "idxGivenMP");
            entity.HasIndex(e => e.OwnerId, "idxNameOwnerID");
            entity.HasIndex(e => e.IsPrimary, "idxNamePrimary");
            entity.HasIndex(e => e.Surname, "idxSurname");
            entity.HasIndex(e => new { e.Surname, e.Given, e.BirthYear, e.DeathYear }, "idxSurnameGiven");
            entity.HasIndex(e => new { e.SurnameMp, e.GivenMp, e.BirthYear, e.DeathYear }, "idxSurnameGivenMP");
            entity.HasIndex(e => e.SurnameMp, "idxSurnameMP");

        });

        modelBuilder.Entity<Payload>(entity =>
        {
            entity.ToTable("PayloadTable");
            entity.HasKey(e => e.RecId);
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(-1);  // dummy value, won't compile without value

            entity.Property(e => e.RecId).ValueGeneratedNever().HasColumnName("RecID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");
                        
            entity.HasIndex(e => e.RecType, "idxPayloadType");
        });
        modelBuilder.Entity<PayloadGroup2>(entity =>
        {
            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(20);
            entity.HasMany(e => e.Entries).WithOne().HasForeignKey(e => e.GroupId).HasPrincipalKey(e=>e.OwnerId);           
        });

        modelBuilder.Entity<PayloadSearch>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(8));

        modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("PersonTable");
                entity.HasKey(e => e.PersonId);
                entity.Ignore(e => e.ChildRelations);
                entity.Ignore(e => e.Children);

                entity.Property(e => e.PersonId).HasColumnName("PersonID").ValueGeneratedOnAdd();
                entity.Property(e => e.SpouseId).HasColumnName("SpouseID");
                entity.Property(e => e.UniqueId).HasColumnName("UniqueID");
                entity.Property(e => e.ChangeDate).HasColumnName("UTCModDate").HasColumnType("FLOAT").HasConversion(v => v.toUTCModDate(), v => v.toDateTime());


                entity.Property(e => e.IsPrivate).HasConversion<long>();
                entity.Property(e => e.Living).HasConversion<long>();
                entity.Property(e => e.Sex).HasConversion<long>();

                entity.HasMany(e => e.WebTags).WithOne().HasForeignKey(e => e.OwnerId);

                entity.HasMany(p => p.Addresses).WithMany().UsingEntity<AddressPerson>(
                l => l.HasOne<Address>().WithMany().HasForeignKey(e => e.AddressId),
                        r => r.HasOne<Person>().WithMany().HasForeignKey(e => e.OwnerId));

                entity.HasMany(p => p.Citations).WithMany().UsingEntity<PersonCitationLink>(
                    l => l.HasOne<Citation>().WithMany().HasForeignKey(e => e.CitationId),
                    r => r.HasOne<Person>().WithMany().HasForeignKey(e => e.OwnerId));

                entity.HasMany(p => p.Media).WithMany().UsingEntity<MediaPersonLink>(
                   l => l.HasOne<Medium>().WithMany().HasForeignKey(e => e.MediaId),
                   r => r.HasOne<Person>().WithMany().HasForeignKey(e => e.OwnerId));


                entity.HasMany(p => p.Events).WithOne().HasForeignKey(e => e.OwnerId);
                //tity.HasMany(p => p.Events).WithMany(e=>e.Persons).UsingEntity()


                //l => l.HasOne<Event>().WithMany().HasForeignKey(e => e.OwnerId),
                //r => r.HasOne<Person>().WithMany().HasForeignKey(e => e.OwnerId));

                entity.HasMany(p => p.Names).WithOne().HasForeignKey(n => n.OwnerId);

            });

        modelBuilder.Entity<Place>(entity =>
        {
            entity.HasKey(e => e.PlaceId);
            entity.ToTable("PlaceTable");

            entity.Property(e => e.PlaceId).ValueGeneratedNever().HasColumnName("PlaceID");
            entity.Property(e => e.AnId).HasColumnName("anID");
            entity.Property(e => e.FsId).HasColumnName("fsID");
            entity.Property(e => e.MasterId).HasColumnName("MasterID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

            entity.HasMany(e => e.WebTags).WithOne().HasForeignKey(e => e.OwnerId);

            entity.HasIndex(e => e.Abbrev, "idxPlaceAbbrev");
            entity.HasIndex(e => e.Name, "idxPlaceName");
            entity.HasIndex(e => e.Reverse, "idxReversePlaceName");
        });

        modelBuilder.Entity<RoleTable>(entity =>
        {
            entity.HasKey(e => e.RoleId);

            entity.ToTable("RoleTable");

            entity.HasIndex(e => e.EventType, "idxRoleEventType");

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("RoleID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<Source>(entity =>
        {
            entity.HasKey(e => e.SourceId);
            entity.ToTable("SourceTable");

            entity.Property(e => e.SourceId).HasColumnName("SourceID").ValueGeneratedNever();
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

            entity.HasMany(e => e.WebTags).WithOne().HasForeignKey(e => e.OwnerId);

            entity.HasMany(s => s.Repositories).WithMany().UsingEntity<RepositorySource>(
                l => l.HasOne<Address>().WithMany().HasForeignKey(e => e.AddressId),
                r => r.HasOne<Source>().WithMany().HasForeignKey(e => e.OwnerId));

            entity.HasMany(p => p.Media).WithMany().UsingEntity<MediaSourceLink>(
             l => l.HasOne<Medium>().WithMany().HasForeignKey(e => e.MediaId),
             r => r.HasOne<Source>().WithMany().HasForeignKey(e => e.OwnerId));

            entity.HasIndex(e => e.Name, "idxSourceName");
        });

        modelBuilder.Entity<SourceTemplateTable>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("SourceTemplateTable");

            entity.HasIndex(e => e.Name, "idxSourceTemplateName");

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<TagTable>(entity =>
        {
            entity.HasKey(e => e.TagId);

            entity.ToTable("TagTable");

            entity.HasIndex(e => e.TagType, "idxTagType");

            entity.Property(e => e.TagId)
                .ValueGeneratedNever()
                .HasColumnName("TagID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<TaskLinkTable>(entity =>
        {
            entity.HasKey(e => e.LinkId);

            entity.ToTable("TaskLinkTable");

            entity.HasIndex(e => e.OwnerId, "idxTaskOwnerID");

            entity.Property(e => e.LinkId)
                .ValueGeneratedNever()
                .HasColumnName("LinkID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.TaskId).HasColumnName("TaskID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<TaskTable>(entity =>
        {
            entity.HasKey(e => e.TaskId);

            entity.ToTable("TaskTable");

            entity.HasIndex(e => e.Name, "idxTaskName");

            entity.Property(e => e.TaskId)
                .ValueGeneratedNever()
                .HasColumnName("TaskID");
            entity.Property(e => e.SortDate1).HasColumnType("BIGINT");
            entity.Property(e => e.SortDate2).HasColumnType("BIGINT");
            entity.Property(e => e.SortDate3).HasColumnType("BIGINT");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        modelBuilder.Entity<WebTag>(entity =>
        {
            entity.HasKey(e => e.LinkId);
            entity.ToTable("URLTable");

            entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(-1);

            entity.Property(e => e.LinkId).ValueGeneratedNever().HasColumnName("LinkID");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.Url).HasColumnName("URL");
            entity.Property(e => e.UtcmodDate).HasColumnType("FLOAT").HasColumnName("UTCModDate");

        });

        modelBuilder.Entity<PersonWebTag>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(0));
        modelBuilder.Entity<SourceWebTag>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(3));
        modelBuilder.Entity<CitationWebTag>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(4));
        modelBuilder.Entity<PlaceWebTag>(entity => entity.HasDiscriminator<long>(e => e.OwnerType).HasValue(5));

        modelBuilder.Entity<WitnessTable>(entity =>
        {
            entity.HasKey(e => e.WitnessId);

            entity.ToTable("WitnessTable");

            entity.HasIndex(e => e.EventId, "idxWitnessEventID");

            entity.HasIndex(e => e.PersonId, "idxWitnessPersonID");

            entity.Property(e => e.WitnessId)
                .ValueGeneratedNever()
                .HasColumnName("WitnessID");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.UtcmodDate)
                .HasColumnType("FLOAT")
                .HasColumnName("UTCModDate");
        });

        //OnModelCreatingPartial(modelBuilder);
    }

}